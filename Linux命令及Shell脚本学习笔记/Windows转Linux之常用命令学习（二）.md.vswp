vnote_backup_file_826537664 /media/josonlee/LENOVO/SwappedForDeepin/Markdown笔记/Vnotes/Coding-Now/Linux命令及Shell脚本学习笔记/Windows转Linux之常用命令学习（二）.md
## 2019/2/6 记录常用命令

### ps 命令
当前系统中进程的快照。它能捕获系统在某一事件的进程状态。如果你想**不断更新查看进程，可以使用top命令**

```
This version of ps accepts several kinds of options:

1   UNIX options, which may be grouped and must be preceded by a dash.
2   BSD options, which may be grouped and must not be used with a dash.
3   GNU long options, which are preceded by two dashes.
```
如上，可以通过man命令来查看ps怎么使用。ps支持三种使用的语法
> UNIX 风格，选项可以组合在一起，并且选项前必须有“-”连字符
BSD 风格，选项可以组合在一起，但是选项前不能有“-”连字符
GNU 风格的长选项，选项前有两个“-”连字符

ps命令默认在控制台显示如下四列信息：

- PID: 运行着的命令(CMD)的进程编号
- TTY: 命令所运行的位置（终端）
- TIME: 运行着的该命令所占用的CPU处理时间
- CMD: 该进程所运行的命令

查看所有进程信息，a代表all，x显示没有控制终端的进程。ax常一起使用
```
ps -ax|less
# 管道符和less命令是为了便于查看
```

根据用户查看进程信息，u表示user，我这里是查看josonlee这个用户的进程
```
ps -u josonlee|less
```

根据进程名字COMMAND或者进程号PID来查看进程信息
```
ps -f -C chrome     //查看chrome相关的进程
ps -f -p 30457      //PID是30457
```

查看某个特定进程的线程，可以使用-L 参数，后面加上特定的PID
```
ps -L 30457
# 一般也会带上-f
ps -Lf 30457
```
它会显示LWP 和 NLWP 列，前者线程ID，后者个数

查看哪个进程占用了多少cpu、内存的信息等，aux参数可显示全部信息
```
ps -aux|less
```
> %CPU: 占用的 CPU 使用率
%MEM: 占用的记忆体使用率
VSZ: 占用的虚拟内存大小
RSS: 占用的实际内存大小
STAT: 该进程的状态
START：进程启动时间
TIME：进程使用总的CPU时间

类似下面所显示的
```
josonlee@josonlee-PC:~$ ps -aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 225308  9196 ?        Ss   11:08   0:01 /sbin/init splash
root         2  0.0  0.0      0     0 ?        S    11:08   0:00 [kthreadd]
root         4  0.0  0.0      0     0 ?        I<   11:08   0:00 [kworker/0:0H]
root         6  0.0  0.0      0     0 ?        I<   11:08   0:00 [mm_percpu_wq]
root         7  0.0  0.0      0     0 ?        S    11:08   0:00 [ksoftirqd/0]
root         8  0.0  0.0      0     0 ?        I    11:08   0:01 [rcu_sched]
root         9  0.0  0.0      0     0 ?        I    11:08   0:00 [rcu_bh]
root        10  0.0  0.0      0     0 ?        S    11:08   0:00 [migration/0]
root        11  0.0  0.0      0     0 ?        S    11:08   0:00 [watchdog/0]
root        12  0.0  0.0      0     0 ?        S    11:08   0:00 [cpuhp/0]
root        13  0.0  0.0      0     0 ?        S    11:08   0:00 [cpuhp/1]
root        14  0.0  0.0      0     0 ?        S    11:08   0:00 [watchdog/1]
root        15  0.0  0.0      0     0 ?        S    11:08   0:00 [migration/1]
root        16  0.0  0.0      0     0 ?        S    11:08   0:00 [ksoftirqd/1]
root        18  0.0  0.0      0     0 ?        I<   11:08   0:00 [kworker/1:0H]
root        19  0.0  0.0      0     0 ?        S    11:08   0:00 [cpuhp/2]
root        20  0.0  0.0      0     0 ?        S    11:08   0:00 [watchdog/2]
root        21  0.0  0.0      0     0 ?        S    11:08   0:00 [migration/2]

...
```
其次是可根据cpu或内存使用大小排序
```
ps -aux --sort -pcpu|head -n 10     //根据cpu使用情况排序，并查看前十个进程情况
ps -aux --sort -pmem|head -n 10     //根据内存使用情况排序
ps -aux --sort -pmem,-pcpu|head -n 10       //根据内存和cpu使用情况排序
```
> 排序格式是：`--sort [+|-] key`，key表示你要显示的某一列的名称，+表示升序排序，而-表示降序排序。如上多列用逗号隔开


常用的参数还有`-ef`：e同a，f是格式化之意，显示进程的所有格式信息；`-eo`：o是控制输出，可以是user、pid、ppid、command、pcpu、pmem、args等
> -ef显示的列为：`UID PID  PPID  C STIME TTY TIME CMD`
> -aux显示的列为：`USER  PID %CPU %MEM VSZ  RSS TTY STAT START TIME COMMAND`

PPID是父进程的pid，C是使用CPU的资源所占百分比，STIME进程开始时间
> -ef和-aux只是两种风格

另外ps命令是静态的，可以结合watch命令实时查看进程信息，如下每1秒刷新一次查看相关信息
```
watch -n 1 'ps  -U josonlee u --sort -pmem | head -n 10'
watch -n 1 'ps  -aux  --sort -pmem | head -n 10'
```
> -U 参数按真实用户ID(RUID)筛选进程，它会从用户列表中选择真实用户名或 ID。真实用户即实际创建该进程的用户。最后的u参数用来决定以针对用户的格式输出，由`User, PID, %CPU, %MEM, VSZ, RSS, TTY, STAT, START, TIME COMMAND`这几列组成

还可以与管道符和grep来查找某些特定进程
```
ps -aux|grep chrome     //查找服务名为chrome的进程
ps -e -o pid,comm,start,etime |grep mysql       //查找mysql相关的进程pid、服务名、启动时间、持续时间
```

> 这里说下time、start、lstart、stime、etime，前面也提到过time是占用cpu时间，etime是进程持续时间，stime<start<lstart是进程启动时间，lstart最精确

参考学习自：[14 Linux ps Command Practical Examples](https://linoxide.com/how-tos/linux-ps-command-examples/)



## 2019/2/15 记录常用命令

### wc 命令

用以统计文件中字节数、字数、行数等，`wc --help`可查看

```l
wc [options] file
// 不带参数，显示行数、字数、字节数 文件名
```

选项：

-c：字节数，-m：统计字符数，-l：统计行数，-L：统计最长行的长度，-w：统计字数（空白、空格或者换行分割开为一个字）

`wc -w < file`可以不要显示文件名



### sed 命令



### fp 命令



## 2019/3/20 记录

### 查找并杀死某个进程

以网易云(netease-cloud-music)为例

kill -9 \`ps aux | grep cloud-music | grep -v grep | awk '{print $2}'\`



### 查找某段时间内修改过的文件并删除

以删除修改时间超过三天，目录/tmp下为例

`find /tmp -mtime +3 -name '*.txt' -exec rm {} \;` 

- `-name`是按文件名查找，后面如果要用正则就得用引号括起
- `-exec command {} \;`是对搜索结果做系列操作（执行一个命令），别忘记空格和分号
- `-size`是根据文件大小查找，G、M、k、c分别代表GB、MB、KB、字节
- 通过时间来查找
  - Access time 上一次文件读或者写的时间，`-mtime	-mmin`，time代表天，min代表分钟
    - `-mtime +3`修改时间超过3天，`-mtime -2`修改时间小于2天
    - `-mmin +60`修改时间超过1小时，其余类似，下面也如此
  - Modifica time 上一次文件被修改的时间，`-atime  -amin`
  - Change time 上一次文件 inode meta 信息被修改的时间，`-ctime  -cmin`
- `-user/group`通过用户/组查找
- `-mindepth/maxdepth` 限定查找深度

## 2019/3/26 记录

### lsof命令妙用

> 摘自：<https://blog.51cto.com/xjsunjie/1255661>

lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。

可以被打开的文件可以是：1.普通的文件，2.目录  3.网络文件系统的文件，4.字符设备文件  5.(函数)共享库  6.管道，命名管道 7.符号链接 8.底层的socket字流，网络socket，unix域名........还有其他很多.


在终端下输入lsof命令即可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能。 



一、查看某端口被什么进程占用



一次在客户现场，帮客户调TOMCAT，启动TOMCAT的时候报8080端口被占用

查看某端口被某个进程占用

\#lsof  -i  :8080

COMMAND   PID USER   FD   TYPE   DEVICE SIZE NODE NAME

httpd    13017 root  490u  IPv4 23881972       TCP *:8080 (LISTEN)

从这里看出是被HTTPD进程占用，之前客户说是IBM的IHS软件已停止，看来并没有真正停止导致端口被占用

\#kill -9  13017

杀掉这个进程后，再启TOMCAT后正常了



二、查看所属用户进程所打开的某种类型的文件



比如查看root用户进程所打开的文件类型为txt的文件

\# lsof -a -u root -d txt

auditd     2639 root txt       REG    3,2  102136  44536 /sbin/auditd

owcimomd   2643 root txt       REG    3,2   24560  90676 /usr/sbin/owcimomd

irqbalanc  2737 root txt       REG    3,2   25880  62557 /usr/sbin/irqbalance

nscd       2771 root txt       REG    3,2  129908  44802 /usr/sbin/nscd

vsftpd     2809 root txt       REG    3,2  129792 132934 /usr/sbin/vsftpd

xinetd     2812 root txt       REG    3,2  165952  60679 /usr/sbin/xinetd

smpppd     2825 root txt       REG    3,2  193752  99524 /usr/sbin/smpppd

sshd       2827 root txt       REG    3,2  376768  98762 /usr/sbin/sshd

zmd        2847 root txt       REG    3,2 1895856  86524 /usr/bin/mono

gdm        2893 root txt       REG    3,2  268424 126353 /opt/gnome/sbin/gdm



三、查找谁在使用某个文件系统

在卸载文件系统时，如果该文件系统中有任何打开的文件，操作通常将会失败。那么通过lsof可以找出那些进程在使用当前要卸载的文件系统。

\# lsof  /testdata/

COMMAND  PID USER   FD   TYPE DEVICE SIZE NODE NAME

bash    4208 root  cwd    DIR    3,1 4096    2 /testdata/

vim     4230 root  cwd    DIR    3,1 4096    2 /testdata/

在这个示例中，用户root正在其/testdata目录中进行一些操作。一个 bash是实例正在运行，并且它当前的目录为/testdata，另一个则显示的是vim正在编辑/testdata下的文件。如果要成功地卸载/testdata，应该在通知用户以确保情况正常之后，中止这些进程。 这个示例说明了应用程序的当前工作目录非常重要，因为它仍保持着文件资源，并且可以防止文件系统被卸载。这就是为什么大部分守护进程（后台进程）将它们的目录更改为根目录、或服务特定的目录（如 sendmail 示例中的 /var/spool/mqueue）的原因，以避免该守护进程阻止卸载不相关的文件系统。



四、列出相关信息

1. 列出某个用户打开的文件信息



lsof  -u username



备注: -u 选项，u其实是user的缩写

如 # lsof -u db2inst1

COMMAND  PID     USER   FD   TYPE   DEVICE       SIZE       NODE NAME

db2sysc 4390 db2inst1  DEL    REG      0,8                294917 /SYSV33984761

db2sysc 4390 db2inst1  DEL    REG      0,8                327686 /SYSV00000000

db2sysc 4390 db2inst1  mem    REG      3,2     132847      19074 /lib64/ld-2.4.so

db2sysc 4390 db2inst1  mem    REG      3,2     217016     158186 /var/run/nscd/passwd

db2sysc 4390 db2inst1  mem    REG      3,2     123722      19107 /lib64/libpthread-2.4.so

db2sysc 4390 db2inst1  mem    REG      3,2  102866497     137967 /opt/ibm/db2/V9.7/lib64/libdb2e.so.1

db2sysc 4390 db2inst1  mem    REG      3,2    7889612     135807 /opt/ibm/db2/V9.7/lib64/libdb2osse.so.1

db2sysc 4390 db2inst1  mem    REG      3,2     399985      19089 /lib64/libm-2.4.so



2. 列出某个程序所打开的文件信息



\#lsof -c mysql



备注: -c 选项将会列出所有以mysql开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符了



3. 列出多个程序多打开的文件信息



\#lsof -c mysql -c apache



4. 列出某个用户以及某个程序所打开的文件信息



\#lsof -u test -c mysql



5. 列出除了某个用户外的被打开的文件信息



\#lsof   -u ^root



备注：^这个符号在用户名之前，将会把是root用户打开的进程不让显示



6. 通过某个进程号显示该进程打开的文件



\#lsof -p 19552

COMMAND     PID USER   FD   TYPE             DEVICE    SIZE       NODE NAME

rpc.mount 19552 root  cwd    DIR                3,2     256      91560 /var/lib/nfs

rpc.mount 19552 root  rtd    DIR                3,2     584          2 /

rpc.mount 19552 root  txt    REG                3,2   77304      98667 /usr/sbin/rpc.mountd

rpc.mount 19552 root  mem    REG                3,2  132847      19074 /lib64/ld-2.4.so

rpc.mount 19552 root  DEL    REG                3,2             132550 /var/run/nscd/db5BU1wW



7. 列出多个进程号对应的文件信息



\#lsof -p 123,456,789



8. 列出除了某个进程号，其他进程号所打开的文件信息



\#lsof -p ^1523



9. 列出所有的网络连接



\#lsof -i



10. 列出所有tcp 网络连接信息



\#lsof  -i tcp



11. 列出所有udp网络连接信息



\#lsof  -i udp



12. 列出谁在使用某个端口



\#lsof -i :3306



13. 列出谁在使用某个特定的udp、tcp端口



\#lsof -i udp:55



特定的tcp端口



\#lsof -i tcp:80



14. 列出某个用户的所有活跃的网络端口



\#lsof  -a -u test -i

15. 查看谁正在使用某个文件



\#lsof   /filepath/file



16. 递归查看某个目录的文件信息



\#lsof +D /filepath/filepath2/



备注: 使用了+D，对应目录下的所有子目录和文件都会被列出



五、恢复删除的文件

当Linux计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以通过lsof来恢复这些文件。 

当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。 

在/proc 目录下，其中包含了反映内核和进程树的各种文件。/proc目录挂载的是在内存中所映射的一块区域，所以这些文件和目录并不存在于磁盘中，因此当我们对这些文件进行读取和写入时，实际上是在从内存中获取相关信息。大多数与 lsof 相关的信息都存储于以进程的 PID 命名的目录中，即 /proc/1234 中包含的是 PID 为 1234 的进程的信息。每个进程目录中存在着各种文件，它们可以使得应用程序简单地了解进程的内存空间、文件描述符列表、指向磁盘上的文件的符号链接和其他系统信息。lsof 程序使用该信息和其他关于内核内部状态的信息来产生其输出。所以lsof 可以显示进程的文件描述符和相关的文件名等信息。也就是我们通过访问进程的文件描述符可以找到该文件的相关信息。 

当系统中的某个文件被意外地删除了，只要这个时候系统中还有进程正在访问该文件，那么我们就可以通过lsof从/proc目录下恢复该文件的内容。 假如由于误操作将/var/log/messages文件删除掉了，那么这时要将/var/log/messages文件恢复的方法如下： 

首先使用lsof来查看当前是否有进程打开/var/logmessages文件，如下：

\# lsof |grep /var/log/messages

syslogd   1283      root    2w      REG        3,3  5381017    1773647 /var/log/messages (deleted)

从上面的信息可以看到 PID 1283（syslogd）打开文件的文件描述符为 2。同时还可以看到/var/log/messages已经标记被删除了。因此我们可以在 /proc/1283/fd/2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下： 



> \# head -n 10 /proc/1283/fd/2
> Aug  4 13:50:15 holmes86 syslogd 1.4.1: restart.
> Aug  4 13:50:15 holmes86 kernel: klogd 1.4.1, log source = /proc/kmsg started.
> Aug  4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 ([root@everestbuilder.linux-ren.org](mailto:root@everestbuilder.linux-ren.org)) (gcc version 4.2.0) #1 SMP Wed Jul 18 11:18:32 EDT 2007
> Aug  4 13:50:15 holmes86 kernel: BIOS-provided physical RAM map:
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000000000 - 000000000009f000 (usable)
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000000009f000 - 00000000000a0000 (reserved)
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000100000 - 000000001f7d3800 (usable)
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000001f7d3800 - 0000000020000000 (reserved)
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000e0000000 - 00000000f0007000 (reserved)
> Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000f0008000 - 00000000f000c000 (reserved)



从上面的信息可以看出，查看 /proc/8663/fd/15 就可以得到所要恢复的数据。如果可以通过文件描述符查看相应的数据，那么就可以使用 I/O 重定向将其复制到文件中，如:

\#cat /proc/1283/fd/2 > /var/log/messages

对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。

## 2019/7/3 记录
### shell命令将文件中";"替换成","
参考：<https://blog.csdn.net/guoqianqian5812/article/details/51425780>
```linux
awk '{gsub(":"," "); print $0 }' file

tr -s ";" "," < file > new_file
```